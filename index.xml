<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Neo FS Tutorials</title><link>https://amlwwalker.github.io/neo-docs/</link><description>Recent content on Neo FS Tutorials</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 24 Jan 2022 11:23:17 +0000</lastBuildDate><atom:link href="https://amlwwalker.github.io/neo-docs/index.xml" rel="self" type="application/rss+xml"/><item><title>Objects</title><link>https://amlwwalker.github.io/neo-docs/examples/objects/</link><pubDate>Mon, 24 Jan 2022 11:23:17 +0000</pubDate><guid>https://amlwwalker.github.io/neo-docs/examples/objects/</guid><description>Objects represent items stored within a container. These are subject to the permissions of the container being the most relaxed possible permissions that can be applied to an object. It is possible using Session/Bearer Tokens to restrict permissions further on objects within a container however
Please note actions on objects are restricted by the permissions on the container AND the permissions of the token used to access the functions.
Uploading Objects Before uploading an object, you will need</description></item><item><title>Tokens</title><link>https://amlwwalker.github.io/neo-docs/examples/tokens/</link><pubDate>Mon, 24 Jan 2022 11:23:17 +0000</pubDate><guid>https://amlwwalker.github.io/neo-docs/examples/tokens/</guid><description>Tokens are requried to act on any objects within a container. Sessions last for limited time and are restricted by permissions. Session tokens use the private key to sign them while [bearer tokens(/examples/tokens) are issued to wallets by a container owner.
Session Tokens Session tokens are tokens that are generated from your private key and are required to access or interact with content inside a container (depending on permissions this can include READ capability).</description></item><item><title>ACL Permissions</title><link>https://amlwwalker.github.io/neo-docs/examples/acl-permissions/</link><pubDate>Tue, 18 Jan 2022 21:13:48 +0000</pubDate><guid>https://amlwwalker.github.io/neo-docs/examples/acl-permissions/</guid><description>Permissions can be applied to both containers and to individual tokens that are issued, such as Bearer tokens. This document will outline how they work and how to use them
Basic ACL Container Permissions Containers can have permissions attached to them allowing for many different privileges.
When creating a container, you are going to need to create a permission
Go Python C# permissions := acl.EACLReadOnlyBasicRule You can read more about ACL permissions within the NeoFS documentation however a set of available to use permissions are available.</description></item><item><title>Clients</title><link>https://amlwwalker.github.io/neo-docs/examples/clients/</link><pubDate>Tue, 18 Jan 2022 21:13:48 +0000</pubDate><guid>https://amlwwalker.github.io/neo-docs/examples/clients/</guid><description>There are two types of client to be aware, of and as they are both clients, it can be confusing. You have a wallet client and an NeoFS client. Interactions with NeoFS will require a NeoFS client, whereas wallet actions will require a wallet client. Note they do not reside in the same package
Wallet Client When using a wallet client you will need to import
Go Python C# import ( &amp;#34;github.</description></item><item><title>Policies</title><link>https://amlwwalker.github.io/neo-docs/examples/policies/</link><pubDate>Tue, 18 Jan 2022 18:58:22 +0000</pubDate><guid>https://amlwwalker.github.io/neo-docs/examples/policies/</guid><description>Before we can create a container, we need to define the policy. A policy defines which storage nodes on NeoFS you are happy to store your data on.
&amp;ndash; todo, how do policies get defined?
Basic example
Go Python C# const placementPolicy = `REP 2 IN X CBF 2 SELECT 2 FROM * AS X `</description></item><item><title>Wallets</title><link>https://amlwwalker.github.io/neo-docs/examples/wallets/</link><pubDate>Tue, 18 Jan 2022 18:57:09 +0000</pubDate><guid>https://amlwwalker.github.io/neo-docs/examples/wallets/</guid><description>Almost everything you may want to do with NeoFS will require access to a wallet. Here are a few handy ways to get a wallet
Imports Go Python C# import ( &amp;#34;github.com/nspcc-dev/neo-go/pkg/rpc/client&amp;#34; &amp;#34;github.com/nspcc-dev/neo-go/pkg/wallet&amp;#34; ) Retrieve from a NEP-6 file (json format) Go Python C# w, err := wallet.NewWalletFromFile(path) if err != nil { return fmt.Errorf(&amp;#34;can&amp;#39;t read the wallet: %w&amp;#34;, err) } Create a new wallet This wallet has no password but is the simplest form of wallet that you can generate</description></item><item><title>Libraries</title><link>https://amlwwalker.github.io/neo-docs/introduction/libraries/</link><pubDate>Tue, 18 Jan 2022 18:14:25 +0000</pubDate><guid>https://amlwwalker.github.io/neo-docs/introduction/libraries/</guid><description>Code Libraries The Go SDK is the basis of all the functionality that is available to you as a developer with regards to NeoFS. Due to the underlying protocol of NeoFS being gRPC, this can be ported to other languages (coming soon here) however for the time being, to get started it is best to use the Go SDK.
There are however certain &amp;lsquo;functionalities&amp;rsquo; that you will require from the Neo-Go library (such as wallet management and cryptography packages), which you can read more about here.</description></item><item><title>Containers</title><link>https://amlwwalker.github.io/neo-docs/examples/containers/</link><pubDate>Tue, 18 Jan 2022 17:42:08 +0000</pubDate><guid>https://amlwwalker.github.io/neo-docs/examples/containers/</guid><description>Containers manage the permissions/access of a group of objects that are being stored. Before being able to store an object, you need to create a container.
Creating a container Before being able to create a container, you will need to
create a policy (placementPolicy) have access to a private key. This is retrieved from a json file using the helper function helper.GetCredentialsFromPath (key) Decide on a set of permissions, (permissions) Have created a NeoFS client (cli) Owner ID You will need to get the owner ID from the wallet private key.</description></item><item><title>Helpers</title><link>https://amlwwalker.github.io/neo-docs/examples/helpers/</link><pubDate>Tue, 18 Jan 2022 17:42:08 +0000</pubDate><guid>https://amlwwalker.github.io/neo-docs/examples/helpers/</guid><description>There are some functions that don&amp;rsquo;t quite fit into another topic. They will be referenced as helper.X in other tutorials
Go Python C# // StringToUint160 attempts to decode the given NEO address string // into an Uint160. const NEO3Prefix byte = 0x35 func StringToUint160(s string) (u util.Uint160, err error) { b, err := base58.CheckDecode(s) if err != nil { return u, err } if b[0] != NEO3Prefix { return u, errors.</description></item><item><title>Concepts</title><link>https://amlwwalker.github.io/neo-docs/introduction/concepts/</link><pubDate>Tue, 18 Jan 2022 17:41:51 +0000</pubDate><guid>https://amlwwalker.github.io/neo-docs/introduction/concepts/</guid><description>NeoFS is very carefully designed to offer the power of a filesytem with all the expected capabilities, on top of a decentralised network.
This means that files/folders etc can have permissions to who can read/write to them who can delete etc etc.
As NeoFS is built on top of the Neo blockchain, these permissions are based on wallet addresses of users.
Objects Objects represent all files/data that is stored on NeoFS.</description></item></channel></rss>