<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Tutorials on English</title><link>https://neo-docs.onrender.com/tutorials/</link><description>Recent content in Tutorials on English</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 18 Jan 2022 17:41:38 +0000</lastBuildDate><atom:link href="https://neo-docs.onrender.com/tutorials/index.xml" rel="self" type="application/rss+xml"/><item><title>Objects</title><link>https://neo-docs.onrender.com/tutorials/objects/</link><pubDate>Mon, 24 Jan 2022 11:23:17 +0000</pubDate><guid>https://neo-docs.onrender.com/tutorials/objects/</guid><description>Objects represent items stored within a container. These are subject to the permissions of the container being the most relaxed possible permissions that can be applied to an object. It is possible using Session/Bearer Tokens to restrict permissions further on objects within a container however
Please note actions on objects are restricted by the permissions on the container AND the permissions of the token used to access the functions.
Uploading Objects Before uploading an object, you will need</description></item><item><title>Tokens</title><link>https://neo-docs.onrender.com/tutorials/tokens/</link><pubDate>Mon, 24 Jan 2022 11:23:17 +0000</pubDate><guid>https://neo-docs.onrender.com/tutorials/tokens/</guid><description>Tokens are requried to act on any objects within a container. Sessions last for limited time and are restricted by permissions. Session tokens use the private key to sign them while bearer tokens are issued to wallets by a container owner.
Session Tokens Session tokens are tokens that are generated from your private key and are required to access or interact with content inside a container. These tokens should only be used by container owners and not distributed to third parties</description></item><item><title>ACL Permissions</title><link>https://neo-docs.onrender.com/tutorials/acl-permissions/</link><pubDate>Tue, 18 Jan 2022 21:13:48 +0000</pubDate><guid>https://neo-docs.onrender.com/tutorials/acl-permissions/</guid><description>NeoFS has an awesome set of permissions you can give to containers.
ACL stands for access control list - its a list, or table really, of rules. They are checked top to bottom to any incoming request. The first permission entry in the table that the request passes, will end the checks. To that end it is important that all DENY permissions come after any ALLOW permissions.
Types of permission Basic ACL Permisisons These can only be applied to containers.</description></item><item><title>Clients</title><link>https://neo-docs.onrender.com/tutorials/clients/</link><pubDate>Tue, 18 Jan 2022 21:13:48 +0000</pubDate><guid>https://neo-docs.onrender.com/tutorials/clients/</guid><description>There are two types of client to be aware, of and as they are both clients, it can be confusing. You have a wallet client and an NeoFS client. Interactions with NeoFS will require a NeoFS client, whereas wallet actions will require a wallet client. Note they do not reside in the same package
Wallet Client When using a wallet client you will need to import
Go Python C# import ( &amp;#34;github.</description></item><item><title>Policies</title><link>https://neo-docs.onrender.com/tutorials/policies/</link><pubDate>Tue, 18 Jan 2022 18:58:22 +0000</pubDate><guid>https://neo-docs.onrender.com/tutorials/policies/</guid><description>Before we can create a container, we need to define the policy. A policy defines which storage nodes on NeoFS you are happy to store your data on.
The approach to do this is to use the simple policy language provided. A policy is made up of 4 components
Overview Filters Filters are used to decide which nodes meet the requirements to store an object. Think of it as &amp;lsquo;filtering&amp;rsquo; out nodes based on some condition.</description></item><item><title>Wallets</title><link>https://neo-docs.onrender.com/tutorials/wallets/</link><pubDate>Tue, 18 Jan 2022 18:57:09 +0000</pubDate><guid>https://neo-docs.onrender.com/tutorials/wallets/</guid><description>Almost everything you may want to do with NeoFS will require access to a wallet. Here are a few handy ways to get a wallet
Imports Go Python C# import ( &amp;#34;github.com/nspcc-dev/neo-go/pkg/rpc/client&amp;#34; &amp;#34;github.com/nspcc-dev/neo-go/pkg/wallet&amp;#34; ) print(&amp;#34;please help by opening a Pull Request and filling in these code snippets!&amp;#34;) Console.WriteLine(&amp;#34;please help by opening a Pull Request and filling in these code snippets!&amp;#34;); Retrieve from a NEP-6 file (json format) Go Python C# w, err := wallet.</description></item><item><title>Containers</title><link>https://neo-docs.onrender.com/tutorials/containers/</link><pubDate>Tue, 18 Jan 2022 17:42:08 +0000</pubDate><guid>https://neo-docs.onrender.com/tutorials/containers/</guid><description>Containers manage the permissions/access of a group of objects that are being stored. Before being able to store an object, you need to create a container.
Creating a container Before being able to create a container, you will need to
create a policy (placementPolicy) have access to a private key. This is retrieved from a json file using the helper function helper.GetCredentialsFromPath (key) Decide on a set of permissions, (permissions) Have created a NeoFS client (cli) Owner ID Before continuing, you will need to get the owner ID from the wallet private key.</description></item><item><title>Helpers</title><link>https://neo-docs.onrender.com/tutorials/helpers/</link><pubDate>Tue, 18 Jan 2022 17:42:08 +0000</pubDate><guid>https://neo-docs.onrender.com/tutorials/helpers/</guid><description>There are some functions that don&amp;rsquo;t quite fit into another topic. They will be referenced as helper.X in other tutorials
Retrieving the Owner ID If you have the public key of a wallet you can determine the ownerID
Go Python C# w, err := owner.NEO3WalletFromPublicKey(&amp;amp;publicKey) if err != nil { return fmt.Errorf(&amp;#34;error retreiving wallet %w&amp;#34;, err) } id, err := owner.NewIDFromNeo3Wallet(w) print(&amp;#34;please help by opening an MR and filling in these code snippets!</description></item></channel></rss>