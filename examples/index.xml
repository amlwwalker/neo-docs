<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Examples on Neo FS Tutorias</title><link>http://example.org/examples/</link><description>Recent content in Examples on Neo FS Tutorias</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 18 Jan 2022 17:41:38 +0000</lastBuildDate><atom:link href="http://example.org/examples/index.xml" rel="self" type="application/rss+xml"/><item><title>Objects</title><link>http://example.org/examples/objects/</link><pubDate>Mon, 24 Jan 2022 11:23:17 +0000</pubDate><guid>http://example.org/examples/objects/</guid><description>Objects represent items stored within a container. These are subject to the permissions of the container being the most relaxed possible permissions that can be applied to an object. It is possilbe using Session/Bearer Tokens to restrict permissions further on objects within a container however
Please note actions on objects are restricted by the permissions on the container AND the permissions of the token used to access the functions.
Uploading Objects Before uploading an object, you will need</description></item><item><title>Tokens</title><link>http://example.org/examples/tokens/</link><pubDate>Mon, 24 Jan 2022 11:23:17 +0000</pubDate><guid>http://example.org/examples/tokens/</guid><description>Tokens are requried to act on any objects within a container. Sessions last for limited time and are restricted by permissions. Session tokens use the private key to sign them while bearer tokens are issued to wallets by a container owner.
Session Tokens Session tokens are tokens that are generated from your private key and are required to access or interact with content inside a container (depending on permissions this can include READ capability).</description></item><item><title>Clients</title><link>http://example.org/examples/clients/</link><pubDate>Tue, 18 Jan 2022 21:13:48 +0000</pubDate><guid>http://example.org/examples/clients/</guid><description>There are two types of client to be aware, of and as they are both clients, it can be confusing. You have a wallet client and an NeoFS client. Interactions with NeoFS will require a NeoFS client, whereas wallet actions will require a wallet client. Note they do not reside in the same package
Wallet Client When using a wallet client you will import
import ( &amp;#34;github.com/nspcc-dev/neo-go/pkg/rpc/client&amp;#34; &amp;#34;github.com/nspcc-dev/neo-go/pkg/wallet&amp;#34; ) To create a wallet client</description></item><item><title>Policies</title><link>http://example.org/examples/policies/</link><pubDate>Tue, 18 Jan 2022 18:58:22 +0000</pubDate><guid>http://example.org/examples/policies/</guid><description>Before we can create a container, we need to define the policy. A policy defines which storage nodes on NeoFS you are happy to store your data on.
&amp;ndash; todo, how do policies get defined?
Basic example
REP 2 IN X CBF 2 SELECT 2 FROM * AS X</description></item><item><title>Wallets</title><link>http://example.org/examples/wallets/</link><pubDate>Tue, 18 Jan 2022 18:57:09 +0000</pubDate><guid>http://example.org/examples/wallets/</guid><description>Almost everything you may want to do with NeoFS will require access to a wallet. Here are a few handy ways to get a wallet
import ( &amp;#34;github.com/nspcc-dev/neo-go/pkg/rpc/client&amp;#34; &amp;#34;github.com/nspcc-dev/neo-go/pkg/wallet&amp;#34; ) Retrieve from a NEP-6 file (json format) w, err := wallet.NewWalletFromFile(path) if err != nil { return fmt.Errorf(&amp;#34;can&amp;#39;t read the wallet: %w&amp;#34;, err) } Create a new wallet This wallet has no password but is the simplest form of wallet that you can generate</description></item><item><title>Containers</title><link>http://example.org/examples/containers/</link><pubDate>Tue, 18 Jan 2022 17:42:08 +0000</pubDate><guid>http://example.org/examples/containers/</guid><description>Containers manage the permissions/access of a group of objects that are being stored. Before being able to store an object, you need to create a container.
Creating a container Before being able to create a container, you will need to
create a policy (placementPolicy) have access to a wallet (key) Decide on a set of permissions, (permissions) Have created a client (cli) Owner ID You will need to get the owner ID from the wallet private key.</description></item></channel></rss>