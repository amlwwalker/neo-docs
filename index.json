[{"uri":"https://amlwwalker.github.io/neo-docs/introduction/","title":"Introduction","tags":[],"description":"","content":"NeoFS Concepts This chapter outlines the concepts and top level points required to understand and enjoy building on NeoFS\n"},{"uri":"https://amlwwalker.github.io/neo-docs/examples/","title":"Examples","tags":[],"description":"","content":"Code examples Examples of building the different elements required to communicate effectively with NeoFS\n"},{"uri":"https://amlwwalker.github.io/neo-docs/","title":"Neo FS Tutorials","tags":[],"description":"","content":""},{"uri":"https://amlwwalker.github.io/neo-docs/examples/objects/","title":"Objects","tags":[],"description":"","content":"Objects represent items stored within a container. These are subject to the permissions of the container being the most relaxed possible permissions that can be applied to an object. It is possible using Session/Bearer Tokens to restrict permissions further on objects within a container however\nPlease note actions on objects are restricted by the permissions on the container AND the permissions of the token used to access the functions.\nUploading Objects Before uploading an object, you will need\n A session token A container ID to upload the object to, with the correct permissions An object to upload (filepath) Have created a NeoFS client (cli)  Attributes Attributes are key value pairs (string:string) that are attached to the metadata of objects. You can specify anything as an attribute, however there are a couple of reserved ones Go Python C#  var attributes []*object.Attribute timeStampAttr := new(object.Attribute) timeStampAttr.SetKey(object.AttributeTimestamp) // AttributeTimestamp key is like a \u0026#39;created at\u0026#39; attribute timeStampAttr.SetValue(strconv.FormatInt(time.Now().Unix(), 10)) fileNameAttr := new(object.Attribute) fileNameAttr.SetKey(object.AttributeFileName) // AttributeFileName key is the filename to be associated with the object. fileNameAttr.SetValue(path.Base(filepath)) attributes = append(attributes, []*object.Attribute{timeStampAttr, fileNameAttr}...)   print(\u0026#34;please help by opening a Pull Request and filling in these code snippets!\u0026#34;)   Console.WriteLine(\u0026#34;please help by opening a Pull Request and filling in these code snippets!\u0026#34;);     If you have set the FileName attribute, you can also refer to the object by its filename, i.e https://http.testnet.fs.neo.org/CONTAINER_ID/upload.png when its uploaded, (see acl permissions)\n Session Token See tokens for how to create a session token\nUpload Go Python C#  f, err := os.Open(filepath) defer f.Close() if err != nil { return fmt.Println(\u0026#34;couldn\u0026#39;t open the file\u0026#34;, err) } reader := bufio.NewReader(f) var ioReader io.Reader ioReader = reader ownerID, err := wallet.OwnerIDFromPrivateKey(key) if err != nil { return fmt.Println(\u0026#34;couldn\u0026#39;t retrieve owner ID\u0026#34;, err) } cntId := new(cid.ID) cntId.Parse(containerID) id, err := object.UploadObject(ctx, cli, cntId, ownerID, attributes, sessionToken, \u0026amp;ioReader) if err != nil { return fmt.Println(\u0026#34;error attempting to upload\u0026#34;, err) } return id.String(), err //id is the object ID that you will want to reference    print(\u0026#34;please help by opening a Pull Request and filling in these code snippets!\u0026#34;)   Console.WriteLine(\u0026#34;please help by opening a Pull Request and filling in these code snippets!\u0026#34;);     Depending on your container\u0026rsquo;s permissions you should now be able to view the file you uploaded at:\nhttps://http.testnet.fs.neo.org/CONTAINER_ID/OBJECT_ID\nGo Python C#  fileNameAttr := new(object.Attribute) fileNameAttr.SetKey(object.AttributeFileName) // AttributeFileName key is the filename to be associated with the object. fileNameAttr.SetValue(path.Base(filepath)) //path.Base(filepath) returns the filename from a filepath   print(\u0026#34;please help by opening a Pull Request and filling in these code snippets!\u0026#34;)   Console.WriteLine(\u0026#34;please help by opening a Pull Request and filling in these code snippets!\u0026#34;);     Listing the content of a container Once you have uploaded objects to a container, you will want to list them out. Listing is a special case of searching within a container. To search for specific objects, you add filters to the search. By setting the only filter as a root filter, it will list everything within the container Go Python C#  var searchParams = new (client.SearchObjectParams) var filters = object.SearchFilters{} filters.AddRootFilter() searchParams.WithContainerID(containerID) searchParams.WithSearchFilters(filters) res, err := cli.SearchObjects(ctx, searchParams, client.WithSession(sessionToken)) if err != nil { return fmt.Errorf(err) } fmt.Printf(\u0026#34;list objects %+v\\n\u0026#34;, res.IDList())   print(\u0026#34;please help by opening a Pull Request and filling in these code snippets!\u0026#34;)   Console.WriteLine(\u0026#34;please help by opening a Pull Request and filling in these code snippets!\u0026#34;);     Retrieve an Object Once you have the ID of an object, you can download it.\nYou will need\n an io.Writer to write the data to a file such as a file writer an object address, which is made up of a container ID and an object ID  To generate an object address from the string forms of a containerID and an objectID: Go Python C#  contID := cid.New() contID.Parse(containerID) objID := obj.NewID() objID.Parse(objectID) objAddress := obj.NewAddress() objAddress.SetObjectID(objID) objAddress.SetContainerID(contID)   print(\u0026#34;please help by opening a Pull Request and filling in these code snippets!\u0026#34;)   Console.WriteLine(\u0026#34;please help by opening a Pull Request and filling in these code snippets!\u0026#34;);     so now you can retrieve the object Go Python C#  var getParams = new(client.GetObjectParams) getParams.WithAddress(objectAddress) getParams.WithPayloadWriter(*writer) o, err := cli.GetObject(ctx, getParams, client.WithSession(sessionToken)) if err != nil { return fmt.Errorf(err) } // payload is in bytes []bytes payload := o.Object().Payload() }   print(\u0026#34;please help by opening a Pull Request and filling in these code snippets!\u0026#34;)   Console.WriteLine(\u0026#34;please help by opening a Pull Request and filling in these code snippets!\u0026#34;);     Retrieving an objects HEAD/metadata Sometimes you want information about an object, without actually downloading the entire object, for instance the size of an object\nFrom a container, you can find out storage policies, owners and any other meta information about the container itself. This is very similar to retrieving the object\nGo Python C#  var headParams = new(client.ObjectHeaderParams) headParams.WithAddress(objectAddress) headObject, err := cli.HeadObject(ctx, headParams, client.WithSession(sessionToken)) if err != nil { return fmt.Errorf(err) } size := headObject.Object().PayloadSize()   print(\u0026#34;please help by opening a Pull Request and filling in these code snippets!\u0026#34;)   Console.WriteLine(\u0026#34;please help by opening a Pull Request and filling in these code snippets!\u0026#34;);     Deleting Objects You may wish to delete an object for a container\nGo Python C#  var deleteParams = new (client.DeleteObjectParams) deleteParams.WithAddress(objectAddress) _, err := cli.DeleteObject(ctx, deleteParams, client.WithSession(sessionToken)) if err != nil { return fmt.Errorf(err) }   print(\u0026#34;please help by opening a Pull Request and filling in these code snippets!\u0026#34;)   Console.WriteLine(\u0026#34;please help by opening a Pull Request and filling in these code snippets!\u0026#34;);     Questions about objects  Can you update the attributes of an existing object Can you determine the original uploader of an object  "},{"uri":"https://amlwwalker.github.io/neo-docs/examples/tokens/","title":"Tokens","tags":[],"description":"","content":"Tokens are requried to act on any objects within a container. Sessions last for limited time and are restricted by permissions. Session tokens use the private key to sign them while [bearer tokens(/examples/tokens) are issued to wallets by a container owner.\nSession Tokens Session tokens are tokens that are generated from your private key and are required to access or interact with content inside a container (depending on permissions this can include READ capability). These tokens should only be used by container owners and not distributed to third parties\nCreating a token You will need\n to decide how long the token should last (e.g const DEFAULT_EXPIRATION = 140000) a context (generally you can use context.Background()) but this depends on your usecase A NeoFS client have access to a private key. This is retrieved from a json file using the helper function helper.GetCredentialsFromPath (key)  Go Python C#  sessionResponse, err := cli.CreateSession(ctx, DEFAULT_EXPIRATION) if err != nil { return \u0026amp;session.Token{}, err } st := session.NewToken() id, err := wallet.OwnerIDFromPrivateKey(key) if err != nil { return \u0026amp;session.Token{}, err } st.SetOwnerID(id) st.SetID(sessionResponse.ID()) st.SetSessionKey(sessionResponse.SessionKey()) //st is your new session token    print(\u0026#34;please help by opening a Pull Request and filling in these code snippets!\u0026#34;)   Console.WriteLine(\u0026#34;please help by opening a Pull Request and filling in these code snippets!\u0026#34;);     "},{"uri":"https://amlwwalker.github.io/neo-docs/examples/acl-permissions/","title":"ACL Permissions","tags":[],"description":"","content":"Permissions can be applied to both containers and to individual tokens that are issued, such as Bearer tokens. This document will outline how they work and how to use them\nBasic ACL Container Permissions Containers can have permissions attached to them allowing for many different privileges.\nWhen creating a container, you are going to need to create a permission\nGo Python C#  permissions := acl.EACLReadOnlyBasicRule   print(\u0026#34;please help by opening a Pull Request and filling in these code snippets!\u0026#34;)   Console.WriteLine(\u0026#34;please help by opening a Pull Request and filling in these code snippets!\u0026#34;);     You can read more about ACL permissions within the NeoFS documentation however a set of available to use permissions are available. Most languages with an SDK will have constants set to these values\n    Name Value Description     PublicBasicRule 0x1FBFBFFF PublicBasicRule is a basic ACL value for final public-read-write container for which extended ACL CANNOT be set.   PrivateBasicRule 0x1C8C8CCC PrivateBasicRule is a basic ACL value for final private container for which extended ACL CANNOT be set.   ReadOnlyBasicRule 0x1FBF8CFF ReadOnlyBasicRule is a basic ACL value for final public-read container for which extended ACL CANNOT be set.   PublicAppendRule 0x1FBF9FFF PublicAppendRule is a basic ACL value for final public-append container for which extended ACL CANNOT be set.   EACLPublicBasicRule 0x0FBFBFFF EACLPublicBasicRule is a basic ACL value for non-final public-read-write container for which extended ACL CAN be set.   EACLPrivateBasicRule 0x0C8C8CCC EACLPrivateBasicRule is a basic ACL value for non-final private container for which extended ACL CAN be set.   EACLReadOnlyBasicRule 0x0FBF8CFF EACLReadOnlyBasicRule is a basic ACL value for non-final public-read container for which extended ACL CAN be set.   EACLPublicAppendRule 0x0FBF9FFF EACLPublicAppendRule is a basic ACL value for non-final public-append container for which extended ACL CAN be set.    "},{"uri":"https://amlwwalker.github.io/neo-docs/examples/clients/","title":"Clients","tags":[],"description":"","content":"There are two types of client to be aware, of and as they are both clients, it can be confusing. You have a wallet client and an NeoFS client. Interactions with NeoFS will require a NeoFS client, whereas wallet actions will require a wallet client. Note they do not reside in the same package\nWallet Client When using a wallet client you will need to import\nGo Python C#  import ( \u0026#34;github.com/nspcc-dev/neo-go/pkg/rpc/client\u0026#34; \u0026#34;github.com/nspcc-dev/neo-go/pkg/wallet\u0026#34;\t)   print(\u0026#34;please help by opening a Pull Request and filling in these code snippets!\u0026#34;)   Console.WriteLine(\u0026#34;please help by opening a Pull Request and filling in these code snippets!\u0026#34;);     To create a wallet client\nGo Python C#  ctx := context.Background() // use endpoint addresses of public RPC nodes, e.g. from https://dora.coz.io/monitor cli, err := client.New(ctx, \u0026#34;http://seed1t4.neo.org:20332\u0026#34;, client.Options{}) if err != nil { return fmt.Errorf(\u0026#34;can\u0026#39;t create client: %w\u0026#34;, err) }   print(\u0026#34;please help by opening a Pull Request and filling in these code snippets!\u0026#34;)   Console.WriteLine(\u0026#34;please help by opening a Pull Request and filling in these code snippets!\u0026#34;);     NeoFS Client The client wraps around the raw API requests to NeoFS. Once you have a client requests to NeoFS can be made so you will need to make this early on from the wallet/private key.\nWhen using the NeoFS client you will import\nGo Python C#  import ( \u0026#34;github.com/nspcc-dev/neofs-sdk-go/client\u0026#34; )   print(\u0026#34;please help by opening a Pull Request and filling in these code snippets!\u0026#34;)   Console.WriteLine(\u0026#34;please help by opening a Pull Request and filling in these code snippets!\u0026#34;);     Creating a client can be done like so\nGo Python C#  cli, err := client.New( // provide private key associated with request owner  client.WithDefaultPrivateKey(privateKey), // find endpoints in https://testcdn.fs.neo.org/doc/integrations/endpoints/  client.WithURIAddress(TESTNET, nil), // check client errors in go compatible way  client.WithNeoFSErrorParsing(), ) if err != nil { return fmt.Errorf(\u0026#34;can\u0026#39;t create client: %w\u0026#34;, err) }   print(\u0026#34;please help by opening a Pull Request and filling in these code snippets!\u0026#34;)   Console.WriteLine(\u0026#34;please help by opening a Pull Request and filling in these code snippets!\u0026#34;);      Private key can be retrieved from a wallet - its type is *ecdsa.PrivateKey The network is a string, for now you can use  Go Python C#  TESTNET string = \u0026#34;grpcs://st01.testnet.fs.neo.org:8082\u0026#34; MAINNET = \u0026#34;grpcs://st01.testnet.fs.neo.org:8082\u0026#34;   print(\u0026#34;please help by opening a Pull Request and filling in these code snippets!\u0026#34;)   Console.WriteLine(\u0026#34;please help by opening a Pull Request and filling in these code snippets!\u0026#34;);     "},{"uri":"https://amlwwalker.github.io/neo-docs/examples/policies/","title":"Policies","tags":[],"description":"","content":"Before we can create a container, we need to define the policy. A policy defines which storage nodes on NeoFS you are happy to store your data on.\n\u0026ndash; todo, how do policies get defined?\nBasic example\nGo Python C#  const placementPolicy = `REP 2 IN X CBF 2 SELECT 2 FROM * AS X `   print(\u0026#34;please help by opening a Pull Request and filling in these code snippets!\u0026#34;)   Console.WriteLine(\u0026#34;please help by opening a Pull Request and filling in these code snippets!\u0026#34;);     "},{"uri":"https://amlwwalker.github.io/neo-docs/examples/wallets/","title":"Wallets","tags":[],"description":"","content":"Almost everything you may want to do with NeoFS will require access to a wallet. Here are a few handy ways to get a wallet\nImports Go Python C#  import ( \u0026#34;github.com/nspcc-dev/neo-go/pkg/rpc/client\u0026#34; \u0026#34;github.com/nspcc-dev/neo-go/pkg/wallet\u0026#34;\t)   print(\u0026#34;please help by opening a Pull Request and filling in these code snippets!\u0026#34;)   Console.WriteLine(\u0026#34;please help by opening a Pull Request and filling in these code snippets!\u0026#34;);     Retrieve from a NEP-6 file (json format) Go Python C#  w, err := wallet.NewWalletFromFile(path) if err != nil { return fmt.Errorf(\u0026#34;can\u0026#39;t read the wallet: %w\u0026#34;, err) }   print(\u0026#34;please help by opening a Pull Request and filling in these code snippets!\u0026#34;)   Console.WriteLine(\u0026#34;please help by opening a Pull Request and filling in these code snippets!\u0026#34;);     Create a new wallet This wallet has no password but is the simplest form of wallet that you can generate\nGo Python C#  acc, err := wallet.NewAccount() //generates a new private key if err != nil { return \u0026amp;wallet.Wallet{}, err } w, err := wallet.NewWallet(path) if err != nil { return fmt.Errorf(\u0026#34;can\u0026#39;t create the wallet: %w\u0026#34;, err) } w.AddAccount(acc)   print(\u0026#34;please help by opening a Pull Request and filling in these code snippets!\u0026#34;)   Console.WriteLine(\u0026#34;please help by opening a Pull Request and filling in these code snippets!\u0026#34;);     A slighty more secure wallet\u0026hellip; with a password Go Python C#  w, err := wallet.NewWallet(path) w.CreateAccount(name, password) if err != nil { return fmt.Errorf(\u0026#34;can\u0026#39;t create the wallet: %w\u0026#34;, err) }   print(\u0026#34;please help by opening a Pull Request and filling in these code snippets!\u0026#34;)   Console.WriteLine(\u0026#34;please help by opening a Pull Request and filling in these code snippets!\u0026#34;);     Retrieving the private key from a wallet Sometimes for specific actions you will need the private key of the wallet. If you have the password you can extract the private key\nNotice this decrypts the wallet. At this point the wallet is considered \u0026ldquo;unlocked\u0026rdquo;. Sometimes you may find you are performing an action on a walelt and the error is it is locked. The result of decrypting is unlocking the wallet.\nGo Python C#  addr := w.GetChangeAddress() //get the default wallet acc := w.GetAccount(addr) if acc == nil { return nil, fmt.Errorf(\u0026#34;invalid wallet address %s: %w\u0026#34;, addrStr, err) } if err := acc.Decrypt(password, keys.NEP2ScryptParams()); err != nil { return nil, errors.New(\u0026#34;[decrypt] invalid password - \u0026#34; + err.Error()) } privateKey := \u0026amp;acc.PrivateKey().PrivateKey   print(\u0026#34;please help by opening a Pull Request and filling in these code snippets!\u0026#34;)   Console.WriteLine(\u0026#34;please help by opening a Pull Request and filling in these code snippets!\u0026#34;);     Retrieving wallet balances Often you will want to know the balances on a wallet. There is a potential minor confusion at this stage. Neo N3 wallets store NEP-17 coins. Both Neo and Gas are NEP 17 currencies, however any currency you or someone else may make could also be a NEP-17 currency. There are other standards such as NEP-11 and the difference I will leave to you to read about.\nHowever, NeoFS has a smart contract in which you need to transfer Gas to, so that you can pay for NeoFS storage space. This balance won\u0026rsquo;t show up in your wallet balance.\nTo retrieve you wallet\u0026rsquo;s NEP-17 balances you will need to create a wallet client.\nYou will need\n A wallet address you want to get the balances of  Go Python C#  cli, err := client.New(ctx, \u0026#34;http://seed1t4.neo.org:20332\u0026#34;, client.Options{}) if err != nil { return fmt.Errorf(\u0026#34;can\u0026#39;t create the client: %w\u0026#34;, err) } err = cli.Init() if err != nil { return fmt.Errorf(\u0026#34;can\u0026#39;t init the client: %w\u0026#34;, err) } recipient, err := helper.StringToUint160(walletAddress) if err != nil { return fmt.Errorf(\u0026#34;can\u0026#39;t convert the wallet address: %w\u0026#34;, err) } balances, err := cli.GetNEP17Balances(recipient) if err != nil { return fmt.Errorf(\u0026#34;can\u0026#39;t retrieve the balances: %w\u0026#34;, err) } fmt.Printf(\u0026#34;balances %+v\\r\\n\u0026#34;, balances)   print(\u0026#34;please help by opening a Pull Request and filling in these code snippets!\u0026#34;)   Console.WriteLine(\u0026#34;please help by opening a Pull Request and filling in these code snippets!\u0026#34;);     Transferring NEP-17 tokens A major part of blockchain technology is to be able to transfer tokens to other wallets (including sending GAS to the NeoFS smart contract).\nYou will need\n An unlocked wallet myWallet A wallet to send Nep17 to walletTo The amount you would like to send (as an int64 - no decimals in blockchain remember!) The token you would like to send. To retrieve the token, you need the token name to get the contract hash  Go Python C#  gasToken, err := cli.GetNativeContractHash(nativenames.Gas) if err != nil { log.Fatal(err) }   print(\u0026#34;please help by opening a Pull Request and filling in these code snippets!\u0026#34;)   Console.WriteLine(\u0026#34;please help by opening a Pull Request and filling in these code snippets!\u0026#34;);     then\nGo Python C#  ctx := context.Background() // use endpoint addresses of public RPC nodes, e.g. from https://dora.coz.io/monitor cli, err := client.New(ctx, \u0026#34;http://seed1t4.neo.org:20332\u0026#34;, client.Options{}) if err != nil { return util.Uint256{}, err } err = cli.Init() if err != nil { return util.Uint256{}, err } recipient, err := helper.StringToUint160(walletTo) if err != nil { return util.Uint256{}, err } txHash, err := cli.TransferNEP17(myWallet, recipient, gasToken, amount, 0, nil, nil) le := txHash.StringLE() return txHash, err   print(\u0026#34;please help by opening a Pull Request and filling in these code snippets!\u0026#34;)   Console.WriteLine(\u0026#34;please help by opening a Pull Request and filling in these code snippets!\u0026#34;);     the txHash is reversed in its uint256 state. You need to reverse it so that it matches the txHashes you would find in a blockchain explorer for instance, hence the le := txHash.StringLE()\n NeoFS Balance However this balance as I mentioned, does not include your NeoFS balance. For that you need a NeoFS client\nGo Python C#  import ( \u0026#34;github.com/nspcc-dev/neofs-sdk-go/client\u0026#34; )   print(\u0026#34;please help by opening a Pull Request and filling in these code snippets!\u0026#34;)   Console.WriteLine(\u0026#34;please help by opening a Pull Request and filling in these code snippets!\u0026#34;);     Once you have this, you can now retrieve your NeoFS balance\nYou will need\n Private key NeoFS client (cli)  Go Python C#  w, err := owner.NEO3WalletFromPublicKey(\u0026amp;key.PublicKey) if err != nil { fmt.Errorf(\u0026#34;couldn\u0026#39;t create wallet from public key: %w\u0026#34;, err) } id := owner.NewIDFromNeo3Wallet(w) ctx := context.Background() neoFSBalance, err := cli.GetBalance(ctx, id) fmt.Printf(\u0026#34;neofs balance %+v\\r\\n\u0026#34;, neoFSBalance)   print(\u0026#34;please help by opening a Pull Request and filling in these code snippets!\u0026#34;)   Console.WriteLine(\u0026#34;please help by opening a Pull Request and filling in these code snippets!\u0026#34;);     "},{"uri":"https://amlwwalker.github.io/neo-docs/introduction/libraries/","title":"Libraries","tags":[],"description":"","content":"Code Libraries The Go SDK is the basis of all the functionality that is available to you as a developer with regards to NeoFS. Due to the underlying protocol of NeoFS being gRPC, this can be ported to other languages (coming soon here) however for the time being, to get started it is best to use the Go SDK.\nThere are however certain \u0026lsquo;functionalities\u0026rsquo; that you will require from the Neo-Go library (such as wallet management and cryptography packages), which you can read more about here.\nSDK The SDK is responsible for providing functionality to interact with NeoFS itself via gRPC requests. You will need the SDK for such things as:\n creating, retrieving, deleting containers creating, updating, retrieving, deleting objects permissions  Neo-Go library General interaction with NeoFS doesn\u0026rsquo;t require Neo-Go however invariably you will need to manage wallets or use cryptographic functions that are required while setting permissions throughout the NeoFS system.\nNeo FS local environment You can clone the repository so that you can start NeoFS locally, this may be beneficial for education reasons or perhaps to run integration tests against a local NeoFS\nhttps://github.com/nspcc-dev/neofs-dev-env/\nHelpers Sometimes there will be throughout the tutorials the need to reuse fucntions from elsewhere. These are stored in the Helpers tutorial and will be useful functions to have available within your projects\nSee Helpers, whenever you see helper. in a code sample\n "},{"uri":"https://amlwwalker.github.io/neo-docs/examples/containers/","title":"Containers","tags":[],"description":"","content":"Containers manage the permissions/access of a group of objects that are being stored. Before being able to store an object, you need to create a container.\nCreating a container Before being able to create a container, you will need to\n create a policy (placementPolicy) have access to a private key. This is retrieved from a json file using the helper function helper.GetCredentialsFromPath (key) Decide on a set of permissions, (permissions) Have created a NeoFS client (cli)  Owner ID You will need to get the owner ID from the wallet private key. The owner ID is not the same as the wallet ID or public key. A straight forward way to do this is\nGo Python C#  //see key retrieval generation for how to get a key w, err := owner.NEO3WalletFromPublicKey(\u0026amp;key.PublicKey) if err != nil { return fmt.Errorf(\u0026#34;invalid private key\u0026#34;) } ownerID := owner.NewIDFromNeo3Wallet(w)   print(\u0026#34;please help by opening a Pull Request and filling in these code snippets!\u0026#34;)   Console.WriteLine(\u0026#34;please help by opening a Pull Request and filling in these code snippets!\u0026#34;);     Now we can get on with creating a container\nGo Python C#  containerPolicy, err := policy.Parse(placementPolicy) if err != nil { return fmt.Errorf(\u0026#34;can\u0026#39;t parse placement policy: %w\u0026#34;, err) } cnr := container.New( // container policy defines the way objects will be  // placed among storage nodes from the network map  container.WithPolicy(containerPolicy), // container owner can set BasicACL and remove container  container.WithOwnerID(ownerID), // read more about basic ACL in specification:  // https://github.com/nspcc-dev/neofs-spec/blob/master/01-arch/07-acl.md  container.WithCustomBasicACL(permissions), // Attributes are key:value string pairs they are always optional  container.WithAttribute( container.AttributeTimestamp, strconv.FormatInt(time.Now().Unix(), 10), ),   print(\u0026#34;please help by opening a Pull Request and filling in these code snippets!\u0026#34;)   Console.WriteLine(\u0026#34;please help by opening a Pull Request and filling in these code snippets!\u0026#34;);     Finally we can put the container on NeoFS. We will receive a response that contains the container\u0026rsquo;s ID.\nGo Python C#  response, err := cli.PutContainer(ctx, cnr) if err != nil { return fmt.Errorf(\u0026#34;can\u0026#39;t put container: %w\u0026#34;, err) } fmt.Println(response.ID())   print(\u0026#34;please help by opening a Pull Request and filling in these code snippets!\u0026#34;)   Console.WriteLine(\u0026#34;please help by opening a Pull Request and filling in these code snippets!\u0026#34;);     Listing Containers You can list all the containers owned by a wallet. This will return an array of container IDs\nGo Python C#  response, err := cli.ListContainers(ctx, wallet.OwnerIDFromPrivateKey(key)) if err != nil { return fmt.Errorf(\u0026#34;can\u0026#39;t list container: %w\u0026#34;, err) } walletList := response.IDList()   print(\u0026#34;please help by opening a Pull Request and filling in these code snippets!\u0026#34;)   Console.WriteLine(\u0026#34;please help by opening a Pull Request and filling in these code snippets!\u0026#34;);     Retrieve a Container You can retrieve a container once you have the ID\nGo Python C#  response, err := cli.GetContainer(ctx, containerID) if err != nil { return fmt.Errorf(\u0026#34;can\u0026#39;t get container %s: %w\u0026#34;, containerID, err) } contianeer := response.Container()   print(\u0026#34;please help by opening a Pull Request and filling in these code snippets!\u0026#34;)   Console.WriteLine(\u0026#34;please help by opening a Pull Request and filling in these code snippets!\u0026#34;);     From a container, you can find out storage policies, owners and any other meta information about the container itself\nDeleting Containers Once you have created a container, you will receive the ID of the container as part of the response (see above). Using this ID you can now delete the container with ease\nGo Python C#  response, err := cli.DeleteContainer(ctx, containerID) if err != nil { return nil, fmt.Errorf(\u0026#34;can\u0026#39;t get container %s: %w\u0026#34;, containerID, err) } fmt.Printf(\u0026#34;deletion response %+v\\r\\n\u0026#34;, response)   print(\u0026#34;please help by opening a Pull Request and filling in these code snippets!\u0026#34;)   Console.WriteLine(\u0026#34;please help by opening a Pull Request and filling in these code snippets!\u0026#34;);     Questions about containers  if you delete a container what happens to all the objects within a container using multisig wallets, could two or more people share ownership of a container - no. status - what information do I receive from a status - error on failure.  "},{"uri":"https://amlwwalker.github.io/neo-docs/examples/helpers/","title":"Helpers","tags":[],"description":"","content":"There are some functions that don\u0026rsquo;t quite fit into another topic. They will be referenced as helper.X in other tutorials\nConvert String to Uin160 Convert a string format Neo (3) address into a uint160. This is the format required for making transfers\nGo Python C#  // StringToUint160 attempts to decode the given NEO address string // into an Uint160. const NEO3Prefix byte = 0x35 func StringToUint160(s string) (u util.Uint160, err error) { b, err := base58.CheckDecode(s) if err != nil { return u, err } if b[0] != NEO3Prefix { return u, errors.New(\u0026#34;wrong address prefix\u0026#34;) } return util.Uint160DecodeBytesBE(b[1:21]) }   print(\u0026#34;please help by opening an MR and filling in these code snippets!\u0026#34;)   Console.WriteLine(\u0026#34;please help by opening an MR and filling in these code snippets!\u0026#34;);     Get credentials from path This returns the private key, which anything can be derived from, with regards to a wallet Go Python C#  // GetCredentialsFromPath retrieves the private key from a wallet file func GetCredentialsFromPath(path, address, password string) (*ecdsa.PrivateKey, error) { w, err := wallet.NewWalletFromFile(path) if err != nil { return nil, fmt.Errorf(\u0026#34;can\u0026#39;t read the wallet: %walletPath\u0026#34;, err) } var ( err error ) addr := w.GetChangeAddress() //default address  acc := w.GetAccount(addr) if acc == nil { return nil, fmt.Errorf(\u0026#34;invalid wallet address %s: %w\u0026#34;, addrStr, err) } if err := acc.Decrypt(password, keys.NEP2ScryptParams()); err != nil { return nil, errors.New(\u0026#34;[decrypt] invalid password - \u0026#34; + err.Error()) } return \u0026amp;acc.PrivateKey().PrivateKey, nil }   print(\u0026#34;please help by opening a Pull Request and filling in these code snippets!\u0026#34;)   Console.WriteLine(\u0026#34;please help by opening a Pull Request and filling in these code snippets!\u0026#34;);     "},{"uri":"https://amlwwalker.github.io/neo-docs/introduction/concepts/","title":"Concepts","tags":[],"description":"","content":"NeoFS is very carefully designed to offer the power of a filesytem with all the expected capabilities, on top of a decentralised network.\nThis means that files/folders etc can have permissions to who can read/write to them who can delete etc etc.\nAs NeoFS is built on top of the Neo blockchain, these permissions are based on wallet addresses of users.\nObjects Objects represent all files/data that is stored on NeoFS. Objects are accessed via SessionTokens or Bearer Tokens\nContainers A container controls the basic permissions that are applied to all content within it. Think of a container like a drive on a computer or network (and not a folder per se).\nAll objects must live within a container, their permissions will default to the permissions of the container\nOwnerID OwnerID is derived from the private key of a wallet and is unique to that wallet.\nPolicies Container policies define the way objects will be placed among storage nodes. That is, you as the container owner can decide what type of Node should store a file for you.\nEACL Containers and sessions/bearer tokens can have differeing permissions. By default permissions will be the same as the container\u0026rsquo;s however if permissions are sent as part of a request, then they can override the permissions of the container\nRead more about ACL here\nAccess Access is made using session tokens (derived from the private key), or bearer tokens, which are distributed by the container owner to others they want to be able to offer restricted capabilities (and time limits) to other users\nWallets A wallet is specifically an item that takes the NEP-6 format and contains any number of accounts. Accounts contain a public address, a private key and other information (read more here)\nWallets contain accounts. The first account in a wallet is the default and its wallet Address is the default address\n"},{"uri":"https://amlwwalker.github.io/neo-docs/categories/","title":"Categories","tags":[],"description":"","content":""},{"uri":"https://amlwwalker.github.io/neo-docs/tags/","title":"Tags","tags":[],"description":"","content":""}]